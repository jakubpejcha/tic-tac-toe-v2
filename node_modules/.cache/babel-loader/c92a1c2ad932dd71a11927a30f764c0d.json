{"ast":null,"code":"import _objectSpread from\"/home/jakub/Projects/tic-tac-toe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/home/jakub/Projects/tic-tac-toe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/jakub/Projects/tic-tac-toe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from'react';import Cell from'./Cell';import{checkWinner}from'./checkWinner';import{findBestMove}from'./minimax';import Modal from'./Modal';import'./styles/Board.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var getDimensions=function getDimensions(numRows){var dimensions={BOARD_NUM_ROWS:numRows,SIZE:'',DELAY:0,WIN_STREAK:0};if(numRows===3)dimensions.SIZE='--small';if(numRows===10)dimensions.SIZE='--large';if(numRows===3)dimensions.DELAY=150;if(numRows===10)dimensions.DELAY=10;dimensions.WIN_STREAK=numRows>=5?5:numRows;return dimensions;};var Board=function Board(_ref){var scoreHandler=_ref.scoreHandler,restart=_ref.restart,handleRestart=_ref.handleRestart,size=_ref.size,isAI=_ref.isAI;var dimensions=getDimensions(size);var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isWinner=_useState2[0],setIsWinner=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isDraw=_useState4[0],setIsDraw=_useState4[1];var _useState5=useState(0),_useState6=_slicedToArray(_useState5,2),numMoves=_useState6[0],setNumMoves=_useState6[1];var _useState7=useState('x'),_useState8=_slicedToArray(_useState7,2),player=_useState8[0],setPlayer=_useState8[1];var _useState9=useState(Array(dimensions.BOARD_NUM_ROWS*dimensions.BOARD_NUM_ROWS).fill({showClassName:'',takenByPlayer:'',winning:false})),_useState10=_slicedToArray(_useState9,2),cells=_useState10[0],setCells=_useState10[1];var _useState11=useState(-1),_useState12=_slicedToArray(_useState11,2),lastCell=_useState12[0],setLastCell=_useState12[1];// restart board\nuseEffect(function(){if(!restart)return;setIsWinner(false);setIsDraw(false);setNumMoves(0);setPlayer('x');cells.forEach(function(cell,index){setCells(function(prevCells){var newCells=_toConsumableArray(prevCells);newCells[index]=_objectSpread(_objectSpread({},cell),{},{takenByPlayer:'',winning:false});return newCells;});});setLastCell(-1);handleRestart(false);},[restart]);// Nice animation of creating the board\nvar showBoard=function showBoard(){cells.forEach(function(cell,index){setTimeout(function(){setCells(function(prevCells){var newCells=_toConsumableArray(prevCells);newCells[index]=_objectSpread(_objectSpread({},cell),{},{showClassName:' show'});return newCells;});},index*dimensions.DELAY);});};useEffect(function(){showBoard();},[]);var onCellClick=function onCellClick(index){setCells(function(prevCells){// in case cell has been clicked before\nif(prevCells[index].takenByPlayer!==''||isWinner)return prevCells;var newCells=_toConsumableArray(prevCells);newCells[index]=_objectSpread(_objectSpread({},prevCells[index]),{},{takenByPlayer:\" \".concat(player)});setNumMoves(function(prevNum){return prevNum+1;});setLastCell(index);return newCells;});};useEffect(function(){//TEST\nif(lastCell===-1)return;// do not run after app starts\nvar result=checkWinner(cells,player,dimensions.BOARD_NUM_ROWS,lastCell,dimensions.WIN_STREAK);if(result&&Array.isArray(result)){setIsWinner(true);scoreHandler(player);setCells(function(prevCells){var newCells=_toConsumableArray(prevCells);result.forEach(function(cell){newCells[cell]=_objectSpread(_objectSpread({},prevCells[cell]),{},{winning:true});});return newCells;});return;}//console.log(checkWinner(cells, player, dimensions.BOARD_NUM_ROWS, lastCell, dimensions.WIN_STREAK));\n// check for draw\nif(numMoves===dimensions.BOARD_NUM_ROWS*dimensions.BOARD_NUM_ROWS){setIsDraw(true);return;};setPlayer(function(prevPlayer){if(prevPlayer==='x')return'o';return'x';});},[lastCell]);//AI move\nuseEffect(function(){if(player==='o'&&isAI){setCells(function(prevCells){// in case cell has been clicked before\n// forAI\nvar boardData={cells:prevCells,currentPlayer:'o',size:dimensions.BOARD_NUM_ROWS,lastCellIndex:lastCell,winStreak:dimensions.WIN_STREAK};var index=findBestMove(boardData);var newCells=_toConsumableArray(prevCells);newCells[index]=_objectSpread(_objectSpread({},prevCells[index]),{},{takenByPlayer:' o'});setNumMoves(function(prevNum){return prevNum+1;});setLastCell(index);return newCells;});}},[player]);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"board board_\".concat(dimensions.BOARD_NUM_ROWS),children:cells.map(function(cell,pos){return/*#__PURE__*/_jsx(Cell,{index:pos,showClassName:cell.showClassName,takenByPlayer:cell.takenByPlayer,winning:cell.winning,currentPlayer:\" current_\".concat(player),size:dimensions.SIZE,onClickCallback:onCellClick},pos);})}),/*#__PURE__*/_jsx(Modal,{isWinner:isWinner,isDraw:isDraw,winner:player})]});};export default Board;","map":{"version":3,"sources":["/home/jakub/Projects/tic-tac-toe/src/Board.tsx"],"names":["useState","useEffect","Cell","checkWinner","findBestMove","Modal","getDimensions","numRows","dimensions","BOARD_NUM_ROWS","SIZE","DELAY","WIN_STREAK","Board","scoreHandler","restart","handleRestart","size","isAI","isWinner","setIsWinner","isDraw","setIsDraw","numMoves","setNumMoves","player","setPlayer","Array","fill","showClassName","takenByPlayer","winning","cells","setCells","lastCell","setLastCell","forEach","cell","index","prevCells","newCells","showBoard","setTimeout","onCellClick","prevNum","result","isArray","prevPlayer","boardData","currentPlayer","lastCellIndex","winStreak","map","pos"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport Cell from './Cell';\nimport { CellInterface } from './shared/interfaces';\nimport { checkWinner } from './checkWinner';\nimport { findBestMove } from './minimax';\nimport Modal from './Modal';\nimport './styles/Board.css';\n\ninterface Dimensions {\n\tBOARD_NUM_ROWS: number,\n\tSIZE: string,\n\tDELAY: number,\n\tWIN_STREAK: number\n}\n\nconst getDimensions = (numRows: number): Dimensions => {\n\tconst dimensions = {\n\t\tBOARD_NUM_ROWS: numRows,\n\t\tSIZE: '',\n\t\tDELAY: 0,\n\t\tWIN_STREAK: 0\n\t}\n\n\tif (numRows === 3) dimensions.SIZE = '--small';\n\tif (numRows === 10) dimensions.SIZE = '--large';\n\n\tif (numRows === 3) dimensions.DELAY = 150;\n\tif (numRows === 10) dimensions.DELAY = 10;\n\n\tdimensions.WIN_STREAK = numRows >= 5 ? 5 : numRows;\n\n\treturn dimensions;\n}\n\ninterface Props {\n\tscoreHandler: (updatePlayer: string) => void,\n\trestart: boolean,\n\thandleRestart: (restart: boolean) => void,\n\tsize: number,\n\tisAI:boolean\n}\n\nconst Board = ({ scoreHandler, restart, handleRestart, size, isAI }: Props) => {\n\n\tconst dimensions = getDimensions(size);\n\n\tconst [isWinner, setIsWinner] = useState(false);\n\n\tconst [isDraw, setIsDraw] = useState(false);\n\n\tconst [numMoves, setNumMoves] = useState(0);\n\n\tconst [player, setPlayer] = useState('x');\n\n\tconst [cells, setCells] = useState<CellInterface[]>(Array(dimensions.BOARD_NUM_ROWS * dimensions.BOARD_NUM_ROWS).fill({\n\t\tshowClassName: '',\n\t\ttakenByPlayer: '',\n\t\twinning: false,\n\t}));\n\n\tconst [lastCell, setLastCell] = useState(-1);\n\n\t// restart board\n\tuseEffect(() => {\n\t\t\n\t\tif (!restart) return;\n\n\t\tsetIsWinner(false);\n\t\tsetIsDraw(false);\n\t\tsetNumMoves(0);\n\t\tsetPlayer('x');\n\n\t\tcells.forEach((cell, index) => {\n\t\t\tsetCells(prevCells => {\n\t\t\t\tconst newCells = [...prevCells];\n\t\n\t\t\t\tnewCells[index] = {\n\t\t\t\t\t...cell,\n\t\t\t\t\ttakenByPlayer: '',\n\t\t\t\t\twinning: false\n\t\t\t\t}\n\n\t\t\t\treturn newCells;\n\t\t\t});\n\t\t});\n\t\t\n\t\tsetLastCell(-1);\n\n\t\thandleRestart(false);\n\t\t\n\t}, [restart]);\n\n\t// Nice animation of creating the board\n\tconst showBoard = () => {\n\n\t\tcells.forEach((cell, index) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tsetCells((prevCells) => {\n\t\t\t\t\tconst newCells = [...prevCells];\n\t\n\t\t\t\t\tnewCells[index] = {\n\t\t\t\t\t\t...cell,\n\t\t\t\t\t\tshowClassName: ' show'\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn newCells;\n\t\t\t\t});\n\t\t\t}, index * dimensions.DELAY);\n\t\t});\n\t};\n\n\tuseEffect(() => {\n\t\tshowBoard();\n\t}, []);\n\n\tconst onCellClick = (index: number) => {\n\t\tsetCells((prevCells => {\n\t\t\t// in case cell has been clicked before\n\t\t\tif (prevCells[index].takenByPlayer !== '' || isWinner) return prevCells;\n\n\t\t\tconst newCells = [...prevCells];\n\n\t\t\tnewCells[index] = {\n\t\t\t\t...prevCells[index],\n\t\t\t\ttakenByPlayer: ` ${player}`\n\t\t\t}\n\n\t\t\tsetNumMoves(prevNum => prevNum + 1);\n\t\t\tsetLastCell(index);\n\n\t\t\treturn newCells;\n\t\t}));\n\n\t};\n\n\tuseEffect(() => {\n\t\t//TEST\n\t\tif (lastCell === -1) return; // do not run after app starts\n\n\t\tconst result: boolean | number[] = checkWinner(cells, player, dimensions.BOARD_NUM_ROWS, lastCell, dimensions.WIN_STREAK);\n\t\t\n\t\tif (result && Array.isArray(result)) {\n\t\t\tsetIsWinner(true);\n\t\t\tscoreHandler(player);\n\t\t\tsetCells((prevCells) => {\n\t\t\t\tconst newCells = [...prevCells];\n\t\t\t\tresult.forEach(cell => {\n\t\t\t\t\tnewCells[cell] = {\n\t\t\t\t\t\t...prevCells[cell],\n\t\t\t\t\t\twinning: true,\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\t\treturn newCells;\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\t//console.log(checkWinner(cells, player, dimensions.BOARD_NUM_ROWS, lastCell, dimensions.WIN_STREAK));\n\t\t\n\n\t\t// check for draw\n\t\tif (numMoves === dimensions.BOARD_NUM_ROWS * dimensions.BOARD_NUM_ROWS) {\n\t\t\tsetIsDraw(true);\n\t\t\treturn;\n\t\t};\n\n\t\tsetPlayer((prevPlayer) => {\n\t\t\tif (prevPlayer === 'x') return 'o';\n\t\t\treturn 'x';\n\t\t});\n\n\t}, [lastCell]);\n\n\t//AI move\n\tuseEffect(() => {\n\t\tif (player === 'o' && isAI) {\n\n\t\t\tsetCells((prevCells => {\n\t\t\t\t// in case cell has been clicked before\n\t\t\t\t// forAI\n\t\t\t\tconst boardData = {\n\t\t\t\t\tcells: prevCells,\n\t\t\t\t\tcurrentPlayer: 'o',\n\t\t\t\t\tsize: dimensions.BOARD_NUM_ROWS,\n\t\t\t\t\tlastCellIndex: lastCell,\n\t\t\t\t\twinStreak: dimensions.WIN_STREAK\n\t\t\t\t}\n\n\t\t\t\tconst index = findBestMove(boardData);\n\t\n\t\t\t\tconst newCells = [...prevCells];\n\t\n\t\t\t\tnewCells[index] = {\n\t\t\t\t\t...prevCells[index],\n\t\t\t\t\ttakenByPlayer: ' o'\n\t\t\t\t}\n\n\t\t\t\tsetNumMoves(prevNum => prevNum + 1);\n\t\t\t\tsetLastCell(index);\n\t\n\t\t\t\treturn newCells;\n\t\t\t}));\n\t\t}\n\t}, [player]);\n\n\treturn (\n\t\t<>\n\t\t\t<div className={`board board_${dimensions.BOARD_NUM_ROWS}`}>\n\t\t\t\t{cells.map((cell, pos) => (\n\t\t\t\t\t<Cell\n\t\t\t\t\t\tkey={pos}\n\t\t\t\t\t\tindex={pos}\n\t\t\t\t\t\tshowClassName={cell.showClassName}\n\t\t\t\t\t\ttakenByPlayer={cell.takenByPlayer}\n\t\t\t\t\t\twinning={cell.winning}\n\t\t\t\t\t\tcurrentPlayer={` current_${player}`}\n\t\t\t\t\t\tsize={dimensions.SIZE}\n\t\t\t\t\t\tonClickCallback={onCellClick}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t<Modal isWinner={isWinner} isDraw={isDraw} winner={player} />\n\t\t</>\n\t)\n};\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}