{"ast":null,"code":"var getColumn=function getColumn(size,index,winStreak){var rowNumber=Math.floor(index/size)+1;var offsetUp=rowNumber<winStreak?rowNumber-1:winStreak-1;var offsetDown=size-rowNumber<winStreak?size-rowNumber:winStreak-1;var column=[];// up\nfor(var i=offsetUp;i>0;i--){column.push(index-i*size);}column.push(index);//down\nfor(var _i=1;_i<=offsetDown;_i++){column.push(index+_i*size);}return column;};var getRow=function getRow(size,index,winStreak){var columnNumber=index%size+1;var offsetLeft=columnNumber<winStreak?columnNumber-1:winStreak-1;var offsetRight=size-columnNumber<winStreak?size-columnNumber:winStreak-1;var row=[];// left\nfor(var i=offsetLeft;i>0;i--){row.push(index-i);}row.push(index);//down\nfor(var _i2=1;_i2<=offsetRight;_i2++){row.push(index+_i2);}return row;};var getDiagonalUpRight=function getDiagonalUpRight(size,index,winStreak){var rowNumber=Math.floor(index/size)+1;var columnNumber=index%size+1;var offsetUp=rowNumber<winStreak?rowNumber-1:winStreak-1;var offsetDown=size-rowNumber<winStreak?size-rowNumber:winStreak-1;var offsetLeft=columnNumber<winStreak?columnNumber-1:winStreak-1;var offsetRight=size-columnNumber<winStreak?size-columnNumber:winStreak-1;// guard column\nvar diagonal=[];// up-right below\nfor(var i=offsetDown;i>0;i--){if(i>offsetLeft)continue;diagonal.push(index+i*size-i);}diagonal.push(index);// up-right above\nfor(var _i3=1;_i3<=offsetUp;_i3++){if(_i3>offsetRight)break;diagonal.push(index-_i3*size+_i3);}return diagonal;};var getDiagonalDownRight=function getDiagonalDownRight(size,index,winStreak){var rowNumber=Math.floor(index/size)+1;var columnNumber=index%size+1;var offsetUp=rowNumber<winStreak?rowNumber-1:winStreak-1;var offsetDown=size-rowNumber<winStreak?size-rowNumber:winStreak-1;var offsetLeft=columnNumber<winStreak?columnNumber-1:winStreak-1;var offsetRight=size-columnNumber<winStreak?size-columnNumber:winStreak-1;var diagonal=[];// down-right above\nfor(var i=offsetUp;i>0;i--){if(i>offsetLeft)continue;diagonal.push(index-i*size-i);}diagonal.push(index);// down-right below\nfor(var _i4=1;_i4<=offsetDown;_i4++){if(_i4>offsetRight)break;diagonal.push(index+_i4*size+_i4);}return diagonal;};var checkMoves=function checkMoves(array,currentPlayer,size,index,winStreak,callbackDirection){var direction=callbackDirection(size,index,winStreak);var streak=0;var winningCells=[];var length=direction.length;for(var i=0;i<length;i++){streak++;winningCells.push(direction[i]);if(array[direction[i]].takenByPlayer===''||array[direction[i]].takenByPlayer.trim()!==currentPlayer){streak=0;winningCells.length=0;};if(streak===winStreak)return winningCells;}return false;};export var checkWinner=function checkWinner(array,currentPlayer,size,index,winStreak){if(index===-1)return false;return checkMoves(array,currentPlayer,size,index,winStreak,getColumn)||checkMoves(array,currentPlayer,size,index,winStreak,getRow)||checkMoves(array,currentPlayer,size,index,winStreak,getDiagonalUpRight)||checkMoves(array,currentPlayer,size,index,winStreak,getDiagonalDownRight)||false;};","map":{"version":3,"sources":["/home/jakub/Projects/tic-tac-toe/src/checkWinner.ts"],"names":["getColumn","size","index","winStreak","rowNumber","Math","floor","offsetUp","offsetDown","column","i","push","getRow","columnNumber","offsetLeft","offsetRight","row","getDiagonalUpRight","diagonal","getDiagonalDownRight","checkMoves","array","currentPlayer","callbackDirection","direction","streak","winningCells","length","takenByPlayer","trim","checkWinner"],"mappings":"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","sourcesContent":["import { CellInterface } from './shared/interfaces';\n\nconst getColumn = (size: number, index: number, winStreak: number): number[] => {\n\tconst rowNumber = Math.floor(index / size) + 1;\n\n\tconst offsetUp = rowNumber < winStreak ? rowNumber - 1 : winStreak - 1;\n\tconst offsetDown = (size - rowNumber) < winStreak ? (size - rowNumber) : winStreak - 1;\n\n\tlet column: number[] = [];\n\t// up\n\tfor (let i = offsetUp; i > 0; i--) {\n\t\tcolumn.push(index - (i * size));\n\t}\n\n\tcolumn.push(index);\n\n\t//down\n\tfor (let i = 1; i <= offsetDown; i++) {\n\t\tcolumn.push(index + (i * size));\n\t}\n\n\treturn column;\n}\n\nconst getRow = (size: number, index: number, winStreak: number): number[] => {\n\tconst columnNumber = (index % size) + 1;\n\n\tconst offsetLeft = columnNumber < winStreak ? columnNumber - 1 : winStreak - 1;\n\tconst offsetRight = (size - columnNumber) < winStreak ? (size - columnNumber) : winStreak - 1;\n\n\tlet row: number[] = [];\n\t// left\n\tfor (let i = offsetLeft; i > 0; i--) {\n\t\trow.push(index - i);\n\t}\n\n\trow.push(index);\n\n\t//down\n\tfor (let i = 1; i <= offsetRight; i++) {\n\t\trow.push(index + i);\n\t}\n\n\treturn row;\n}\n\nconst getDiagonalUpRight = (size: number, index: number, winStreak: number): number[] => {\n\tconst rowNumber = Math.floor(index / size) + 1;\n\tconst columnNumber = (index % size) + 1;\n\n\tconst offsetUp = rowNumber < winStreak ? rowNumber - 1 : winStreak - 1;\n\tconst offsetDown = (size - rowNumber) < winStreak ? (size - rowNumber) : winStreak - 1;\n\n\tconst offsetLeft = columnNumber < winStreak ? columnNumber - 1 : winStreak - 1;\n\tconst offsetRight = (size - columnNumber) < winStreak ? (size - columnNumber) : winStreak - 1;\n\n\t// guard column\n\n\tlet diagonal: number[] = [];\n\t// up-right below\n\tfor (let i = offsetDown; i > 0; i--) {\n\t\tif (i > offsetLeft) continue;\n\t\tdiagonal.push(index + (i * size) - i);\n\t}\n\n\tdiagonal.push(index);\n\n\t// up-right above\n\tfor (let i = 1; i <= offsetUp; i++) {\n\t\tif (i > offsetRight) break;\n\t\tdiagonal.push(index - (i * size) + i);\n\t}\n\n\treturn diagonal;\n}\n\nconst getDiagonalDownRight = (size: number, index: number, winStreak: number): number[] => {\n\tconst rowNumber = Math.floor(index / size) + 1;\n\tconst columnNumber = (index % size) + 1;\n\n\tconst offsetUp = rowNumber < winStreak ? rowNumber - 1 : winStreak - 1;\n\tconst offsetDown = (size - rowNumber) < winStreak ? (size - rowNumber) : winStreak - 1;\n\n\tconst offsetLeft = columnNumber < winStreak ? columnNumber - 1 : winStreak - 1;\n\tconst offsetRight = (size - columnNumber) < winStreak ? (size - columnNumber) : winStreak - 1;\n\n\tlet diagonal: number[] = [];\n\t// down-right above\n\tfor (let i = offsetUp; i > 0; i--) {\n\t\tif (i > offsetLeft) continue;\n\t\tdiagonal.push(index - (i * size) - i);\n\t}\n\n\tdiagonal.push(index);\n\n\t// down-right below\n\tfor (let i = 1; i <= offsetDown; i++) {\n\t\tif (i > offsetRight) break;\n\t\tdiagonal.push(index + (i * size) + i);\n\t}\n\n\treturn diagonal;\n}\n\nconst checkMoves = (\n\tarray: CellInterface[],\n\tcurrentPlayer: string,\n\tsize: number,\n\tindex: number,\n\twinStreak: number,\n\tcallbackDirection: ((size: number, index: number, winStreak: number) => number[])\n): boolean | number[] => {\n\tconst direction = callbackDirection(size, index, winStreak);\n\t\n\tlet streak = 0;\n\tconst winningCells: number[] = [];\n\tconst length = direction.length;\n\t\n\tfor (let i = 0; i < length; i++) {\n\t\tstreak++;\n\t\twinningCells.push(direction[i]);\n\t\t\n\t\tif (array[direction[i]].takenByPlayer === '' || array[direction[i]].takenByPlayer.trim() !== currentPlayer) {\n\t\t\tstreak = 0;\n\t\t\twinningCells.length = 0;\n\t\t};\n\n\t\tif (streak === winStreak) return winningCells;\n\t\t\n\t}\n\t\n\treturn false;\n}\n\nexport const checkWinner = (\n\tarray: CellInterface[],\n\tcurrentPlayer: string,\n\tsize: number,\n\tindex: number,\n\twinStreak: number\n): boolean | number[] => {\n\n\tif (index === -1) return false;\n\n\treturn (\n\t\tcheckMoves(array, currentPlayer, size, index, winStreak, getColumn) ||\n\t\tcheckMoves(array, currentPlayer, size, index, winStreak, getRow) ||\n\t\tcheckMoves(array, currentPlayer, size, index, winStreak, getDiagonalUpRight) ||\n\t\tcheckMoves(array, currentPlayer, size, index, winStreak, getDiagonalDownRight) ||\n\t\tfalse\n\t);\n\n}"]},"metadata":{},"sourceType":"module"}