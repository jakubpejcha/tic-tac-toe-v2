{"version":3,"sources":["Cell.tsx","checkWinner.ts","minimax.ts","Modal.tsx","Board.tsx","ThemeToggler.tsx","Score.tsx","Restart.tsx","Back.tsx","Game.tsx","GameMenu.tsx","Welcome.tsx","App.tsx","index.tsx"],"names":["Cell","index","showClassName","takenByPlayer","currentPlayer","winning","size","onClickCallback","className","data-index","onClick","e","currentTarget","dataset","getColumn","winStreak","rowNumber","Math","floor","offsetDown","column","i","push","getRow","columnNumber","offsetRight","row","getDiagonalUpRight","offsetUp","offsetLeft","diagonal","getDiagonalDownRight","checkMoves","array","callbackDirection","direction","streak","winningCells","length","trim","checkWinner","swapPlayers","minimax","depth","boardData","isMaximizer","cellsCopy","cells","lastCellIndex","boardScore","result","evaluateBoard","isMovesLeft","best","forEach","cell","newBoardData","max","min","Modal","isWinner","isDraw","winner","useState","isHidden","setIsHidden","useEffect","setTimeout","portal","document","getElementById","text","ReactDom","createPortal","Board","scoreHandler","restart","handleRestart","isAI","dimensions","numRows","BOARD_NUM_ROWS","SIZE","DELAY","WIN_STREAK","getDimensions","setIsWinner","setIsDraw","numMoves","setNumMoves","player","setPlayer","Array","fill","setCells","lastCell","setLastCell","prevCells","newCells","onCellClick","prevNum","isArray","prevPlayer","boardDataCopy","console","log","bestValue","bestMove","time","moveValue","timeEnd","findBestMove","map","pos","ThemeToggler","theme","onClickHandler","title","Score","score","Restart","Back","goToPath","history","useHistory","type","goBack","icon","faHandPointLeft","Game","themeGrey","setThemeGrey","setScore","setRestart","useParams","mode","prev","updatePlayer","prevScore","GameMenu","props","children","Welcome","useRouteMatch","path","url","to","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7ec71f02.chunk.js","sourcesContent":["import React from 'react';\nimport './styles/Cell.css';\nimport './styles/CellGrey.css';\nimport './styles/CellColor.css';\n\ninterface Props {\n\tindex: number,\n\tshowClassName: string,\n\ttakenByPlayer: string,\n\tcurrentPlayer: string,\n\twinning: boolean,\n\tsize:string,\n\tonClickCallback: (index: number) => void\n};\n\nconst Cell = ({ index, showClassName, takenByPlayer, currentPlayer, winning, size, onClickCallback }: Props) => {\n\n\tconst handleOnClick = (e:React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n\t\tif (typeof e.currentTarget.dataset.index === 'undefined') return null;\n\t\tonClickCallback(+e.currentTarget.dataset.index);\n\t}\n\n\treturn (\n\t\t<div className=\"board__cell-wrapper\">\n\t\t\t<div\n\t\t\t\tdata-index={index}\n\t\t\t\tclassName={`board__cell-content board__cell board__cell${size}${showClassName}${currentPlayer}${takenByPlayer}${winning ? ' winning' : ''}`}\n\t\t\t\tonClick={handleOnClick}\n\t\t\t/>\n\t\t\t<div className={`board__cell-content board__cell--backface board__cell--backface${size}${takenByPlayer}${winning ? ' winning' : ''}`} />\n\t\t</div>\n\t)\n};\n\nexport default Cell;\n","import { CellInterface } from './shared/interfaces';\n\nconst getColumn = (size: number, index: number, winStreak: number): number[] => {\n\tconst rowNumber = Math.floor(index / size) + 1;\n\n\tconst offsetUp = rowNumber < winStreak ? rowNumber - 1 : winStreak - 1;\n\tconst offsetDown = (size - rowNumber) < winStreak ? (size - rowNumber) : winStreak - 1;\n\n\tlet column: number[] = [];\n\t// up\n\tfor (let i = offsetUp; i > 0; i--) {\n\t\tcolumn.push(index - (i * size));\n\t}\n\n\tcolumn.push(index);\n\n\t//down\n\tfor (let i = 1; i <= offsetDown; i++) {\n\t\tcolumn.push(index + (i * size));\n\t}\n\n\treturn column;\n}\n\nconst getRow = (size: number, index: number, winStreak: number): number[] => {\n\tconst columnNumber = (index % size) + 1;\n\n\tconst offsetLeft = columnNumber < winStreak ? columnNumber - 1 : winStreak - 1;\n\tconst offsetRight = (size - columnNumber) < winStreak ? (size - columnNumber) : winStreak - 1;\n\n\tlet row: number[] = [];\n\t// left\n\tfor (let i = offsetLeft; i > 0; i--) {\n\t\trow.push(index - i);\n\t}\n\n\trow.push(index);\n\n\t//down\n\tfor (let i = 1; i <= offsetRight; i++) {\n\t\trow.push(index + i);\n\t}\n\n\treturn row;\n}\n\nconst getDiagonalUpRight = (size: number, index: number, winStreak: number): number[] => {\n\tconst rowNumber = Math.floor(index / size) + 1;\n\tconst columnNumber = (index % size) + 1;\n\n\tconst offsetUp = rowNumber < winStreak ? rowNumber - 1 : winStreak - 1;\n\tconst offsetDown = (size - rowNumber) < winStreak ? (size - rowNumber) : winStreak - 1;\n\n\tconst offsetLeft = columnNumber < winStreak ? columnNumber - 1 : winStreak - 1;\n\tconst offsetRight = (size - columnNumber) < winStreak ? (size - columnNumber) : winStreak - 1;\n\n\t// guard column\n\n\tlet diagonal: number[] = [];\n\t// up-right below\n\tfor (let i = offsetDown; i > 0; i--) {\n\t\tif (i > offsetLeft) continue;\n\t\tdiagonal.push(index + (i * size) - i);\n\t}\n\n\tdiagonal.push(index);\n\n\t// up-right above\n\tfor (let i = 1; i <= offsetUp; i++) {\n\t\tif (i > offsetRight) break;\n\t\tdiagonal.push(index - (i * size) + i);\n\t}\n\n\treturn diagonal;\n}\n\nconst getDiagonalDownRight = (size: number, index: number, winStreak: number): number[] => {\n\tconst rowNumber = Math.floor(index / size) + 1;\n\tconst columnNumber = (index % size) + 1;\n\n\tconst offsetUp = rowNumber < winStreak ? rowNumber - 1 : winStreak - 1;\n\tconst offsetDown = (size - rowNumber) < winStreak ? (size - rowNumber) : winStreak - 1;\n\n\tconst offsetLeft = columnNumber < winStreak ? columnNumber - 1 : winStreak - 1;\n\tconst offsetRight = (size - columnNumber) < winStreak ? (size - columnNumber) : winStreak - 1;\n\n\tlet diagonal: number[] = [];\n\t// down-right above\n\tfor (let i = offsetUp; i > 0; i--) {\n\t\tif (i > offsetLeft) continue;\n\t\tdiagonal.push(index - (i * size) - i);\n\t}\n\n\tdiagonal.push(index);\n\n\t// down-right below\n\tfor (let i = 1; i <= offsetDown; i++) {\n\t\tif (i > offsetRight) break;\n\t\tdiagonal.push(index + (i * size) + i);\n\t}\n\n\treturn diagonal;\n}\n\nconst checkMoves = (\n\tarray: CellInterface[],\n\tcurrentPlayer: string,\n\tsize: number,\n\tindex: number,\n\twinStreak: number,\n\tcallbackDirection: ((size: number, index: number, winStreak: number) => number[])\n): boolean | number[] => {\n\tconst direction = callbackDirection(size, index, winStreak);\n\t\n\tlet streak = 0;\n\tconst winningCells: number[] = [];\n\tconst length = direction.length;\n\t\n\tfor (let i = 0; i < length; i++) {\n\t\tstreak++;\n\t\twinningCells.push(direction[i]);\n\t\t\n\t\tif (array[direction[i]].takenByPlayer === '' || array[direction[i]].takenByPlayer.trim() !== currentPlayer) {\n\t\t\tstreak = 0;\n\t\t\twinningCells.length = 0;\n\t\t};\n\n\t\tif (streak === winStreak) return winningCells;\n\t\t\n\t}\n\t\n\treturn false;\n}\n\nexport const checkWinner = (\n\tarray: CellInterface[],\n\tcurrentPlayer: string,\n\tsize: number,\n\tindex: number,\n\twinStreak: number\n): boolean | number[] => {\n\n\tif (index === -1) return false;\n\n\treturn (\n\t\tcheckMoves(array, currentPlayer, size, index, winStreak, getColumn) ||\n\t\tcheckMoves(array, currentPlayer, size, index, winStreak, getRow) ||\n\t\tcheckMoves(array, currentPlayer, size, index, winStreak, getDiagonalUpRight) ||\n\t\tcheckMoves(array, currentPlayer, size, index, winStreak, getDiagonalDownRight) ||\n\t\tfalse\n\t);\n\n}","import { checkWinner } from './checkWinner';\nimport { CellInterface } from './shared/interfaces';\n\nconst evaluateBoard = (result: boolean | number[], isMaximizer: boolean): number => {\n\n\tif (!result) {\n\t\treturn 0;\n\t} else if (isMaximizer) {\n\t\treturn 10;\n\t} else {\n\t\treturn -10;\n\t}\n}\n\nconst isMovesLeft = (cells: CellInterface[]) => {\n\tfor (const cell of cells) {\n\t\tif (cell.takenByPlayer === '') return true;\n\t}\n\treturn false;\n}\n\nconst swapPlayers = (currentPlayer: string) => {\n\tif (currentPlayer === 'x') return 'o';\n\treturn 'x';\n}\n\ninterface BoardData {\n\tcells: CellInterface[],\n\tcurrentPlayer: string,\n\tsize: number,\n\tlastCellIndex: number,\n\twinStreak: number\n}\n\n// cells will be a copy\nconst minimax = (depth: number, boardData: BoardData, isMaximizer: boolean): number => {\n\tconst {cells: cellsCopy, currentPlayer, size, lastCellIndex, winStreak} = boardData;\n\n\tconst result = checkWinner(cellsCopy, currentPlayer, size, lastCellIndex, winStreak);\n\tconst boardScore = evaluateBoard(result, isMaximizer);\n\t\n\n\tif (boardScore === 10) return boardScore;\n\tif (boardScore === -10) return boardScore;\n\tif (!isMovesLeft(cellsCopy)) return 0;\n\n\t// do not modify cells\n\tlet best = -100;\n\n\tif (isMaximizer) {\n\n\t\tcellsCopy.forEach((cell, index) => {\n\t\t\tif (cell.takenByPlayer === '') {\n\n\t\t\t\tcell.takenByPlayer = swapPlayers(currentPlayer);\n\t\t\t\t//console.log(cellsCopy[index].takenByPlayer);\n\t\t\t\t\n\t\t\t\tconst newBoardData: BoardData = {\n\t\t\t\t\t...boardData,\n\t\t\t\t\tcells: cellsCopy,\n\t\t\t\t\tcurrentPlayer: swapPlayers(currentPlayer),\n\t\t\t\t\tlastCellIndex: index,\n\t\t\t\t}\n\t\t\t\tbest = Math.max(best, minimax(depth + 1, newBoardData, !isMaximizer));\n\n\t\t\t\tcell.takenByPlayer = '';\n\t\t\t}\n\t\t});\n\n\t} else {\n\t\tbest = 100;\n\n\t\tcellsCopy.forEach((cell, index) => {\n\t\t\tif (cell.takenByPlayer === '') {\n\t\t\t\tcell.takenByPlayer = swapPlayers(currentPlayer);\n\n\t\t\t\tconst newBoardData: BoardData = {\n\t\t\t\t\t...boardData,\n\t\t\t\t\tcells: cellsCopy,\n\t\t\t\t\tcurrentPlayer: swapPlayers(currentPlayer),\n\t\t\t\t\tlastCellIndex: index,\n\t\t\t\t}\n\t\t\t\tbest = Math.min(best, minimax(depth + 1, newBoardData, !isMaximizer));\n\n\t\t\t\tcell.takenByPlayer = '';\n\t\t\t}\n\t\t});\n\t}\n\n\treturn best;\n}\n\nexport const findBestMove = (boardData: BoardData):number => {\n\tconst {cells, currentPlayer, size, lastCellIndex, winStreak} = boardData;\n\n\tconst cellsCopy = [...cells];\n\tconst boardDataCopy = {\n\t\t...boardData,\n\t\tcells: cellsCopy,\n\t};\n\tconsole.log('called finder');\n\t\n\tlet bestValue = -100;\n\tlet bestMove = -1;\n\t\n\tboardDataCopy.cells.forEach((cell, index) => {\t\n\t\tif (cell.takenByPlayer === '') {\n\t\t\tcell.takenByPlayer = currentPlayer;\n\t\t\tboardDataCopy.lastCellIndex = index;\n\n\t\t\tconsole.time('minimax')\n\t\t\tlet moveValue = minimax(0, boardDataCopy, true);\n\t\t\tconsole.timeEnd('minimax')\n\t\t\t\n\n\t\t\tcell.takenByPlayer = '';\n\n\t\t\tif (moveValue > bestValue) {\n\t\t\t\tbestValue = moveValue;\n\t\t\t\tbestMove = index;\n\t\t\t}\n\t\t}\n\t});\n\n\treturn bestMove;\n}","import { useState, useEffect } from 'react';\nimport ReactDom from 'react-dom';\nimport './styles/Modal.css';\n\ninterface Props {\n\tisWinner: boolean,\n\tisDraw: boolean,\n\twinner: string\n}\n\nconst Modal = ({ isWinner, isDraw, winner }: Props) => {\n\tconst [isHidden, setIsHidden] = useState(true);\n\n\tuseEffect(() => {\n\t\n\t\tsetTimeout(() => {\n\t\t\tsetIsHidden(!(isWinner || isDraw));\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tsetIsHidden(true);\n\t\t\t}, 2000);\n\n\t\t}, 1000);\n\n\t}, [isWinner, isDraw]);\n\n\tconst portal: HTMLElement | null = document.getElementById('modalPortal');\n\n\tlet text: string = '';\n\tif (isWinner) text = `Player ${winner} wins!!!`;\n\tif (isDraw) text = \"Draw!!!\"\n\n\treturn (\n\t\tportal ?\n\t\tReactDom.createPortal(\n\t\t\t<>\n\t\t\t\t<div className={`modal${ isHidden ? '' : ' show' }`}>\n\t\t\t\t\t<div className=\"modal__message\">\n\t\t\t\t\t\t{text}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</>,\n\t\t\tportal\n\t\t) :\n\t\tnull\n\t)\n}\n\nexport default Modal;\n","import { useState, useEffect } from 'react';\nimport Cell from './Cell';\nimport { CellInterface } from './shared/interfaces';\nimport { checkWinner } from './checkWinner';\nimport { findBestMove } from './minimax';\nimport Modal from './Modal';\nimport './styles/Board.css';\n\ninterface Dimensions {\n\tBOARD_NUM_ROWS: number,\n\tSIZE: string,\n\tDELAY: number,\n\tWIN_STREAK: number\n}\n\nconst getDimensions = (numRows: number): Dimensions => {\n\tconst dimensions = {\n\t\tBOARD_NUM_ROWS: numRows,\n\t\tSIZE: '',\n\t\tDELAY: 0,\n\t\tWIN_STREAK: 0\n\t}\n\n\tif (numRows === 3) dimensions.SIZE = '--small';\n\tif (numRows === 10) dimensions.SIZE = '--large';\n\n\tif (numRows === 3) dimensions.DELAY = 150;\n\tif (numRows === 10) dimensions.DELAY = 10;\n\n\tdimensions.WIN_STREAK = numRows >= 5 ? 5 : numRows;\n\n\treturn dimensions;\n}\n\ninterface Props {\n\tscoreHandler: (updatePlayer: string) => void,\n\trestart: boolean,\n\thandleRestart: (restart: boolean) => void,\n\tsize: number,\n\tisAI:boolean\n}\n\nconst Board = ({ scoreHandler, restart, handleRestart, size, isAI }: Props) => {\n\n\tconst dimensions = getDimensions(size);\n\n\tconst [isWinner, setIsWinner] = useState(false);\n\n\tconst [isDraw, setIsDraw] = useState(false);\n\n\tconst [numMoves, setNumMoves] = useState(0);\n\n\tconst [player, setPlayer] = useState('x');\n\n\tconst [cells, setCells] = useState<CellInterface[]>(Array(dimensions.BOARD_NUM_ROWS * dimensions.BOARD_NUM_ROWS).fill({\n\t\tshowClassName: '',\n\t\ttakenByPlayer: '',\n\t\twinning: false,\n\t}));\n\n\tconst [lastCell, setLastCell] = useState(-1);\n\n\t// restart board\n\tuseEffect(() => {\n\t\t\n\t\tif (!restart) return;\n\n\t\tsetIsWinner(false);\n\t\tsetIsDraw(false);\n\t\tsetNumMoves(0);\n\t\tsetPlayer('x');\n\n\t\tcells.forEach((cell, index) => {\n\t\t\tsetCells(prevCells => {\n\t\t\t\tconst newCells = [...prevCells];\n\t\n\t\t\t\tnewCells[index] = {\n\t\t\t\t\t...cell,\n\t\t\t\t\ttakenByPlayer: '',\n\t\t\t\t\twinning: false\n\t\t\t\t}\n\n\t\t\t\treturn newCells;\n\t\t\t});\n\t\t});\n\t\t\n\t\tsetLastCell(-1);\n\n\t\thandleRestart(false);\n\t\t\n\t}, [restart]);\n\n\t// Nice animation of creating the board\n\tconst showBoard = () => {\n\n\t\tcells.forEach((cell, index) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tsetCells((prevCells) => {\n\t\t\t\t\tconst newCells = [...prevCells];\n\t\n\t\t\t\t\tnewCells[index] = {\n\t\t\t\t\t\t...cell,\n\t\t\t\t\t\tshowClassName: ' show'\n\t\t\t\t\t}\n\t\n\t\t\t\t\treturn newCells;\n\t\t\t\t});\n\t\t\t}, index * dimensions.DELAY);\n\t\t});\n\t};\n\n\tuseEffect(() => {\n\t\tshowBoard();\n\t}, []);\n\n\tconst onCellClick = (index: number) => {\n\t\tsetCells((prevCells => {\n\t\t\t// in case cell has been clicked before\n\t\t\tif (prevCells[index].takenByPlayer !== '' || isWinner) return prevCells;\n\n\t\t\tconst newCells = [...prevCells];\n\n\t\t\tnewCells[index] = {\n\t\t\t\t...prevCells[index],\n\t\t\t\ttakenByPlayer: ` ${player}`\n\t\t\t}\n\n\t\t\tsetNumMoves(prevNum => prevNum + 1);\n\t\t\tsetLastCell(index);\n\n\t\t\treturn newCells;\n\t\t}));\n\n\t};\n\n\tuseEffect(() => {\n\t\t//TEST\n\t\tif (lastCell === -1) return; // do not run after app starts\n\n\t\tconst result: boolean | number[] = checkWinner(cells, player, dimensions.BOARD_NUM_ROWS, lastCell, dimensions.WIN_STREAK);\n\t\t\n\t\tif (result && Array.isArray(result)) {\n\t\t\tsetIsWinner(true);\n\t\t\tscoreHandler(player);\n\t\t\tsetCells((prevCells) => {\n\t\t\t\tconst newCells = [...prevCells];\n\t\t\t\tresult.forEach(cell => {\n\t\t\t\t\tnewCells[cell] = {\n\t\t\t\t\t\t...prevCells[cell],\n\t\t\t\t\t\twinning: true,\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\t\treturn newCells;\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\t//console.log(checkWinner(cells, player, dimensions.BOARD_NUM_ROWS, lastCell, dimensions.WIN_STREAK));\n\t\t\n\n\t\t// check for draw\n\t\tif (numMoves === dimensions.BOARD_NUM_ROWS * dimensions.BOARD_NUM_ROWS) {\n\t\t\tsetIsDraw(true);\n\t\t\treturn;\n\t\t};\n\n\t\tsetPlayer((prevPlayer) => {\n\t\t\tif (prevPlayer === 'x') return 'o';\n\t\t\treturn 'x';\n\t\t});\n\n\t}, [lastCell]);\n\n\t//AI move\n\tuseEffect(() => {\n\t\tif (player === 'o' && isAI) {\n\n\t\t\tsetCells((prevCells => {\n\t\t\t\t// in case cell has been clicked before\n\t\t\t\t// forAI\n\t\t\t\tconst boardData = {\n\t\t\t\t\tcells: prevCells,\n\t\t\t\t\tcurrentPlayer: 'o',\n\t\t\t\t\tsize: dimensions.BOARD_NUM_ROWS,\n\t\t\t\t\tlastCellIndex: lastCell,\n\t\t\t\t\twinStreak: dimensions.WIN_STREAK\n\t\t\t\t}\n\n\t\t\t\tconst index = findBestMove(boardData);\n\t\n\t\t\t\tconst newCells = [...prevCells];\n\t\n\t\t\t\tnewCells[index] = {\n\t\t\t\t\t...prevCells[index],\n\t\t\t\t\ttakenByPlayer: ' o'\n\t\t\t\t}\n\n\t\t\t\tsetNumMoves(prevNum => prevNum + 1);\n\t\t\t\tsetLastCell(index);\n\t\n\t\t\t\treturn newCells;\n\t\t\t}));\n\t\t}\n\t}, [player]);\n\n\treturn (\n\t\t<>\n\t\t\t<div className={`board board_${dimensions.BOARD_NUM_ROWS}`}>\n\t\t\t\t{cells.map((cell, pos) => (\n\t\t\t\t\t<Cell\n\t\t\t\t\t\tkey={pos}\n\t\t\t\t\t\tindex={pos}\n\t\t\t\t\t\tshowClassName={cell.showClassName}\n\t\t\t\t\t\ttakenByPlayer={cell.takenByPlayer}\n\t\t\t\t\t\twinning={cell.winning}\n\t\t\t\t\t\tcurrentPlayer={` current_${player}`}\n\t\t\t\t\t\tsize={dimensions.SIZE}\n\t\t\t\t\t\tonClickCallback={onCellClick}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t<Modal isWinner={isWinner} isDraw={isDraw} winner={player} />\n\t\t</>\n\t)\n};\n\nexport default Board;","import React from 'react';\nimport './styles/ThemeToggler.css';\n\ninterface Props {\n\ttheme: string,\n\tonClickHandler: () => void\n}\n\nconst ThemeToggler = ({ theme, onClickHandler }: Props) => {\n\treturn (\n\t\t<div\n\t\t\tclassName={`theme-toggler theme-toggler--${theme}`}\n\t\t\tonClick={onClickHandler}\n\t\t\ttitle=\"Toggle theme\"\n\t\t/>\n\t)\n}\n\nexport default ThemeToggler;\n","import { ScoreInterface } from './shared/interfaces';\nimport './styles/Score.css'\n\ninterface Props {\n\tscore: ScoreInterface,\n\ttheme: string,\n}\n\nconst Score = ( { score, theme }: Props) => {\n\treturn (\n\t\t<div className={`score score--${theme}`}>\n\t\t\t<span className=\"score__title\">SCORE:</span>\n\t\t\t<div className=\"score__table\">\n\t\t\t\t<div className=\"score__row score__row--players\">\n\t\t\t\t\t<span className=\"score__column--left\">x</span>\n\t\t\t\t\t<span className=\"score__column--right\">o</span>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"score__row score__row--score\">\n\t\t\t\t\t<span className=\"score__column--left\">{score['x']}</span>\n\t\t\t\t\t<span className=\"score__column--right\">{score['o']}</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Score;\n","import './styles/Restart.css';\n\ninterface Props {\n\tonClickHandler: (restart: boolean) => void,\n\ttheme: string,\n}\n\nconst Restart = ({ onClickHandler, theme }: Props) => {\n\treturn (\n\t\t<button className={`restart restart--${theme}`} onClick={() => onClickHandler(true)}>\n\t\t\t<span>Clear board</span>\n\t\t</button>\n\t)\n}\n\nexport default Restart;\n","import { useHistory } from \"react-router-dom\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHandPointLeft } from '@fortawesome/free-solid-svg-icons';\nimport './styles/Back.css';\n\ninterface Props {\n\tgoToPath: string | null\n}\n\nconst Back = ({ goToPath }: Props) => {\n\tconst history = useHistory();\n\n\tconst handleOnClick = () => {\n\n\t\tif (goToPath !== null) {\n\t\t\thistory.push(goToPath);\n\t\t} else {\n\t\t\thistory.goBack();\n\t\t}\n\t\t\n\t\t\n\t}\n\n\treturn (\n\t\t<div className=\"back\">\n\t\t\t<button type=\"button\" onClick={handleOnClick}>\n\t\t\t\t<FontAwesomeIcon icon={faHandPointLeft} /><span className=\"back__text\"> go back</span>\n\t\t\t</button>\n\t\t</div>\n\t)\n}\n\nexport default Back;\n","import { useState } from 'react';\nimport Board from './Board';\nimport ThemeToggler from './ThemeToggler';\nimport { ScoreInterface } from './shared/interfaces';\nimport Score from './Score';\nimport Restart from './Restart';\nimport Back from './Back';\nimport { useParams} from 'react-router-dom';\n\nconst Game = () => {\n\n  const [themeGrey, setThemeGrey] = useState(false);\n\n  const theme = themeGrey ? 'grey' : 'color';\n  \n  const [score, setScore] = useState<ScoreInterface>({ 'x': 0, 'o': 0 });\n\n  const [restart, setRestart] = useState(false);\n\n  const handleThemeChange = () => {\n    setThemeGrey(prev => !prev)\n  }\n\n  const handleScoreUpdate = (updatePlayer: string) => {\n    setScore(prevScore => {\n      return {\n        ...prevScore,\n        [updatePlayer]: prevScore[updatePlayer] + 1,\n      }\n    });\n  }\n\n  const handleRestart = (restart: boolean) => {\n    setRestart(restart);\n  }\n\n  // const unsetRestart = () => {\n  //   setRestart(false);\n  // }\n\n  type GameParams = {\n    mode: string,\n    type: string\n  }\n\n  const { mode: size, type } = useParams<GameParams>();\n  \n\n  return (\n      <div className={`app-container app-container--${theme}`}>\n        <Back goToPath={null} />\n        <Restart onClickHandler={handleRestart} theme={theme} />\n        <ThemeToggler\n          theme={theme}\n          onClickHandler={handleThemeChange}\n        />\n        <Score score={score} theme={theme} />\n        <Board\n          scoreHandler={handleScoreUpdate}\n          restart={restart}\n          handleRestart={handleRestart}\n          size={+size}\n          isAI={type === 'pvc'}\n        />\n      </div>\n  );\n};\n\nexport default Game;\n","import './styles/GameMenu.css';\n\ninterface Props {\n\tchildren: React.ReactNode\n}\n\nconst GameMenu = (props: Props) => {\n\treturn (\n\t\t<ul className=\"game-menu\">\n\t\t\t{props.children}\n\t\t</ul>\n\t)\n}\n\nexport default GameMenu;\n","import './styles/Welcome.css';\nimport GameMenu from './GameMenu';\nimport Back from './Back';\nimport {\n\tLink,\n\tRoute,\n\tSwitch,\n\tuseRouteMatch\n} from 'react-router-dom';\n\ntype RouteType = {\n\tpath: string,\n\turl: string\n}\n\nconst Welcome = () => {\n\tconst { path, url } = useRouteMatch<RouteType>();\n\t\n\treturn (\n\t\t<div className=\"welcome\">\n\t\t\t<h1 className=\"welcome__title\">TIC TAC TOE</h1>\n\t\t\t<div className=\"welcome__menu\">\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path={`${path}/mode-3`}>\n\t\t\t\t\t\t<GameMenu>\n\t\t\t\t\t\t\t<Back goToPath={null} />\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/game/3/pvp\">Player vs Player</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/game/3/pvc\">Player vs AI</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</GameMenu>\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path={`${path}/mode-10`}>\n\t\t\t\t\t\t<GameMenu>\n\t\t\t\t\t\t\t<Back goToPath={null} />\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/game/10/pvp\">Player vs Player</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</GameMenu>\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path={path}>\n\t\t\t\t\t\t<GameMenu>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to={`${url}/mode-3`}>3 x 3 mode (includes AI opponent)</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to={`${url}/mode-10`}>10 x 10 mode</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</GameMenu>\n\t\t\t\t\t</Route>\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Welcome;\n","import './styles/App.css';\nimport Game from './Game';\nimport Welcome from './Welcome';\nimport {\n\tBrowserRouter as Router,\n\tSwitch,\n\tRoute,\n\tRedirect\n } from 'react-router-dom';\n\nconst App = () => {\n\treturn (\n\t\t<Router>\n\t\t\t<Switch>\n\t\t\t\t<Route path=\"/game/:mode/:type\">\n\t\t\t\t\t<Game />\n\t\t\t\t</Route>\n\t\t\t\t<Route path=\"/welcome\">\n\t\t\t\t\t<Welcome />\n\t\t\t\t</Route>\n\t\t\t\t<Route path=\"/\">\n\t\t\t\t\t<Redirect to=\"/welcome\" />\n\t\t\t\t</Route>\n\t\t\t</Switch>\n\t\t</Router>\n\t)\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}